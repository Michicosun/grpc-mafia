// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package tracker_client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// AddCommentAddCommentRound includes the requested fields of the GraphQL type Round.
type AddCommentAddCommentRound struct {
	Id       string                                     `json:"id"`
	Comments []AddCommentAddCommentRoundCommentsComment `json:"comments"`
}

// GetId returns AddCommentAddCommentRound.Id, and is useful for accessing the field via an interface.
func (v *AddCommentAddCommentRound) GetId() string { return v.Id }

// GetComments returns AddCommentAddCommentRound.Comments, and is useful for accessing the field via an interface.
func (v *AddCommentAddCommentRound) GetComments() []AddCommentAddCommentRoundCommentsComment {
	return v.Comments
}

// AddCommentAddCommentRoundCommentsComment includes the requested fields of the GraphQL type Comment.
type AddCommentAddCommentRoundCommentsComment struct {
	From string `json:"from"`
	Text string `json:"text"`
}

// GetFrom returns AddCommentAddCommentRoundCommentsComment.From, and is useful for accessing the field via an interface.
func (v *AddCommentAddCommentRoundCommentsComment) GetFrom() string { return v.From }

// GetText returns AddCommentAddCommentRoundCommentsComment.Text, and is useful for accessing the field via an interface.
func (v *AddCommentAddCommentRoundCommentsComment) GetText() string { return v.Text }

// AddCommentResponse is returned by AddComment on success.
type AddCommentResponse struct {
	AddComment AddCommentAddCommentRound `json:"AddComment"`
}

// GetAddComment returns AddCommentResponse.AddComment, and is useful for accessing the field via an interface.
func (v *AddCommentResponse) GetAddComment() AddCommentAddCommentRound { return v.AddComment }

// GetRoundInfoGetRoundInfoRound includes the requested fields of the GraphQL type Round.
type GetRoundInfoGetRoundInfoRound struct {
	Id         string                                         `json:"id"`
	State      RoundState                                     `json:"state"`
	Started_at string                                         `json:"started_at"`
	Players    []GetRoundInfoGetRoundInfoRoundPlayersPlayer   `json:"players"`
	Comments   []GetRoundInfoGetRoundInfoRoundCommentsComment `json:"comments"`
}

// GetId returns GetRoundInfoGetRoundInfoRound.Id, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRound) GetId() string { return v.Id }

// GetState returns GetRoundInfoGetRoundInfoRound.State, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRound) GetState() RoundState { return v.State }

// GetStarted_at returns GetRoundInfoGetRoundInfoRound.Started_at, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRound) GetStarted_at() string { return v.Started_at }

// GetPlayers returns GetRoundInfoGetRoundInfoRound.Players, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRound) GetPlayers() []GetRoundInfoGetRoundInfoRoundPlayersPlayer {
	return v.Players
}

// GetComments returns GetRoundInfoGetRoundInfoRound.Comments, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRound) GetComments() []GetRoundInfoGetRoundInfoRoundCommentsComment {
	return v.Comments
}

// GetRoundInfoGetRoundInfoRoundCommentsComment includes the requested fields of the GraphQL type Comment.
type GetRoundInfoGetRoundInfoRoundCommentsComment struct {
	From string `json:"from"`
	Text string `json:"text"`
}

// GetFrom returns GetRoundInfoGetRoundInfoRoundCommentsComment.From, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRoundCommentsComment) GetFrom() string { return v.From }

// GetText returns GetRoundInfoGetRoundInfoRoundCommentsComment.Text, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRoundCommentsComment) GetText() string { return v.Text }

// GetRoundInfoGetRoundInfoRoundPlayersPlayer includes the requested fields of the GraphQL type Player.
type GetRoundInfoGetRoundInfoRoundPlayersPlayer struct {
	Login string `json:"login"`
	Role  string `json:"role"`
	Alive bool   `json:"alive"`
}

// GetLogin returns GetRoundInfoGetRoundInfoRoundPlayersPlayer.Login, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRoundPlayersPlayer) GetLogin() string { return v.Login }

// GetRole returns GetRoundInfoGetRoundInfoRoundPlayersPlayer.Role, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRoundPlayersPlayer) GetRole() string { return v.Role }

// GetAlive returns GetRoundInfoGetRoundInfoRoundPlayersPlayer.Alive, and is useful for accessing the field via an interface.
func (v *GetRoundInfoGetRoundInfoRoundPlayersPlayer) GetAlive() bool { return v.Alive }

// GetRoundInfoResponse is returned by GetRoundInfo on success.
type GetRoundInfoResponse struct {
	GetRoundInfo GetRoundInfoGetRoundInfoRound `json:"GetRoundInfo"`
}

// GetGetRoundInfo returns GetRoundInfoResponse.GetRoundInfo, and is useful for accessing the field via an interface.
func (v *GetRoundInfoResponse) GetGetRoundInfo() GetRoundInfoGetRoundInfoRound { return v.GetRoundInfo }

// ListRoundsListRoundsRound includes the requested fields of the GraphQL type Round.
type ListRoundsListRoundsRound struct {
	Id         string                                     `json:"id"`
	State      RoundState                                 `json:"state"`
	Started_at string                                     `json:"started_at"`
	Players    []ListRoundsListRoundsRoundPlayersPlayer   `json:"players"`
	Comments   []ListRoundsListRoundsRoundCommentsComment `json:"comments"`
}

// GetId returns ListRoundsListRoundsRound.Id, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRound) GetId() string { return v.Id }

// GetState returns ListRoundsListRoundsRound.State, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRound) GetState() RoundState { return v.State }

// GetStarted_at returns ListRoundsListRoundsRound.Started_at, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRound) GetStarted_at() string { return v.Started_at }

// GetPlayers returns ListRoundsListRoundsRound.Players, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRound) GetPlayers() []ListRoundsListRoundsRoundPlayersPlayer {
	return v.Players
}

// GetComments returns ListRoundsListRoundsRound.Comments, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRound) GetComments() []ListRoundsListRoundsRoundCommentsComment {
	return v.Comments
}

// ListRoundsListRoundsRoundCommentsComment includes the requested fields of the GraphQL type Comment.
type ListRoundsListRoundsRoundCommentsComment struct {
	From string `json:"from"`
	Text string `json:"text"`
}

// GetFrom returns ListRoundsListRoundsRoundCommentsComment.From, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRoundCommentsComment) GetFrom() string { return v.From }

// GetText returns ListRoundsListRoundsRoundCommentsComment.Text, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRoundCommentsComment) GetText() string { return v.Text }

// ListRoundsListRoundsRoundPlayersPlayer includes the requested fields of the GraphQL type Player.
type ListRoundsListRoundsRoundPlayersPlayer struct {
	Login string `json:"login"`
	Role  string `json:"role"`
	Alive bool   `json:"alive"`
}

// GetLogin returns ListRoundsListRoundsRoundPlayersPlayer.Login, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRoundPlayersPlayer) GetLogin() string { return v.Login }

// GetRole returns ListRoundsListRoundsRoundPlayersPlayer.Role, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRoundPlayersPlayer) GetRole() string { return v.Role }

// GetAlive returns ListRoundsListRoundsRoundPlayersPlayer.Alive, and is useful for accessing the field via an interface.
func (v *ListRoundsListRoundsRoundPlayersPlayer) GetAlive() bool { return v.Alive }

// ListRoundsResponse is returned by ListRounds on success.
type ListRoundsResponse struct {
	ListRounds []ListRoundsListRoundsRound `json:"ListRounds"`
}

// GetListRounds returns ListRoundsResponse.ListRounds, and is useful for accessing the field via an interface.
func (v *ListRoundsResponse) GetListRounds() []ListRoundsListRoundsRound { return v.ListRounds }

type RoundState string

const (
	RoundStateRunning     RoundState = "RUNNING"
	RoundStateWinMafia    RoundState = "WIN_MAFIA"
	RoundStateWinSheriffs RoundState = "WIN_SHERIFFS"
)

// __AddCommentInput is used internally by genqlient
type __AddCommentInput struct {
	Round_id string `json:"round_id"`
	From     string `json:"from"`
	Text     string `json:"text"`
}

// GetRound_id returns __AddCommentInput.Round_id, and is useful for accessing the field via an interface.
func (v *__AddCommentInput) GetRound_id() string { return v.Round_id }

// GetFrom returns __AddCommentInput.From, and is useful for accessing the field via an interface.
func (v *__AddCommentInput) GetFrom() string { return v.From }

// GetText returns __AddCommentInput.Text, and is useful for accessing the field via an interface.
func (v *__AddCommentInput) GetText() string { return v.Text }

// __GetRoundInfoInput is used internally by genqlient
type __GetRoundInfoInput struct {
	Id string `json:"id"`
}

// GetId returns __GetRoundInfoInput.Id, and is useful for accessing the field via an interface.
func (v *__GetRoundInfoInput) GetId() string { return v.Id }

// __ListRoundsInput is used internally by genqlient
type __ListRoundsInput struct {
	N     int        `json:"n"`
	State RoundState `json:"state"`
}

// GetN returns __ListRoundsInput.N, and is useful for accessing the field via an interface.
func (v *__ListRoundsInput) GetN() int { return v.N }

// GetState returns __ListRoundsInput.State, and is useful for accessing the field via an interface.
func (v *__ListRoundsInput) GetState() RoundState { return v.State }

// The query or mutation executed by AddComment.
const AddComment_Operation = `
mutation AddComment ($round_id: ID!, $from: String!, $text: String!) {
	AddComment(round_id: $round_id, from: $from, text: $text) {
		id
		comments {
			from
			text
		}
	}
}
`

func AddComment(
	ctx context.Context,
	client graphql.Client,
	round_id string,
	from string,
	text string,
) (*AddCommentResponse, error) {
	req := &graphql.Request{
		OpName: "AddComment",
		Query:  AddComment_Operation,
		Variables: &__AddCommentInput{
			Round_id: round_id,
			From:     from,
			Text:     text,
		},
	}
	var err error

	var data AddCommentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GetRoundInfo.
const GetRoundInfo_Operation = `
query GetRoundInfo ($id: ID) {
	GetRoundInfo(id: $id) {
		id
		state
		started_at
		players {
			login
			role
			alive
		}
		comments {
			from
			text
		}
	}
}
`

func GetRoundInfo(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetRoundInfoResponse, error) {
	req := &graphql.Request{
		OpName: "GetRoundInfo",
		Query:  GetRoundInfo_Operation,
		Variables: &__GetRoundInfoInput{
			Id: id,
		},
	}
	var err error

	var data GetRoundInfoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by ListRounds.
const ListRounds_Operation = `
query ListRounds ($n: Int, $state: RoundState!) {
	ListRounds(n: $n, state: $state) {
		id
		state
		started_at
		players {
			login
			role
			alive
		}
		comments {
			from
			text
		}
	}
}
`

func ListRounds(
	ctx context.Context,
	client graphql.Client,
	n int,
	state RoundState,
) (*ListRoundsResponse, error) {
	req := &graphql.Request{
		OpName: "ListRounds",
		Query:  ListRounds_Operation,
		Variables: &__ListRoundsInput{
			N:     n,
			State: state,
		},
	}
	var err error

	var data ListRoundsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
