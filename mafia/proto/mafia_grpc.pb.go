// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: mafia.proto

package mafia_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaServiceClient is the client API for MafiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaServiceClient interface {
	FindGame(ctx context.Context, opts ...grpc.CallOption) (MafiaService_FindGameClient, error)
}

type mafiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaServiceClient(cc grpc.ClientConnInterface) MafiaServiceClient {
	return &mafiaServiceClient{cc}
}

func (c *mafiaServiceClient) FindGame(ctx context.Context, opts ...grpc.CallOption) (MafiaService_FindGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &MafiaService_ServiceDesc.Streams[0], "/mafia.MafiaService/FindGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaServiceFindGameClient{stream}
	return x, nil
}

type MafiaService_FindGameClient interface {
	Send(*Action) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type mafiaServiceFindGameClient struct {
	grpc.ClientStream
}

func (x *mafiaServiceFindGameClient) Send(m *Action) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaServiceFindGameClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaServiceServer is the server API for MafiaService service.
// All implementations must embed UnimplementedMafiaServiceServer
// for forward compatibility
type MafiaServiceServer interface {
	FindGame(MafiaService_FindGameServer) error
	mustEmbedUnimplementedMafiaServiceServer()
}

// UnimplementedMafiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServiceServer struct {
}

func (UnimplementedMafiaServiceServer) FindGame(MafiaService_FindGameServer) error {
	return status.Errorf(codes.Unimplemented, "method FindGame not implemented")
}
func (UnimplementedMafiaServiceServer) mustEmbedUnimplementedMafiaServiceServer() {}

// UnsafeMafiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServiceServer will
// result in compilation errors.
type UnsafeMafiaServiceServer interface {
	mustEmbedUnimplementedMafiaServiceServer()
}

func RegisterMafiaServiceServer(s grpc.ServiceRegistrar, srv MafiaServiceServer) {
	s.RegisterService(&MafiaService_ServiceDesc, srv)
}

func _MafiaService_FindGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaServiceServer).FindGame(&mafiaServiceFindGameServer{stream})
}

type MafiaService_FindGameServer interface {
	Send(*Event) error
	Recv() (*Action, error)
	grpc.ServerStream
}

type mafiaServiceFindGameServer struct {
	grpc.ServerStream
}

func (x *mafiaServiceFindGameServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaServiceFindGameServer) Recv() (*Action, error) {
	m := new(Action)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaService_ServiceDesc is the grpc.ServiceDesc for MafiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia.MafiaService",
	HandlerType: (*MafiaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindGame",
			Handler:       _MafiaService_FindGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mafia.proto",
}
