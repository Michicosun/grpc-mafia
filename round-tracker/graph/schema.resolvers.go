package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"grpc-mafia/round-tracker/graph/model"
)

// CreateRound is the resolver for the createRound field.
func (r *mutationResolver) CreateRound(ctx context.Context, roundInfo model.RoundInfo, playerInfos []*model.PlayerInfo) (*model.Round, error) {
	players := make([]*model.Player, 0)

	for _, info := range playerInfos {
		players = append(players, &model.Player{
			Login: info.Login,
			Role:  info.Role,
			Alive: true,
		})
	}

	round := model.Round{
		ID:        roundInfo.ID,
		StartedAt: roundInfo.StartedAt,
		Players:   players,
	}

	r.rounds[round.ID] = &round

	return &round, nil
}

// UpdatePlayers is the resolver for the updatePlayers field.
func (r *mutationResolver) UpdatePlayers(ctx context.Context, id string, playerStatuses []*model.PlayerStatus) (*model.Round, error) {
	round, ok := r.rounds[id]
	if !ok {
		return nil, fmt.Errorf("round not found")
	}

	status_map := make(map[string]*model.PlayerStatus)

	for _, status := range playerStatuses {
		status_map[status.Login] = status
	}

	for _, player := range round.Players {
		player.Alive = status_map[player.Login].Alive
	}

	return round, nil
}

// RoundInfo is the resolver for the RoundInfo field.
func (r *queryResolver) RoundInfo(ctx context.Context, id *string) (*model.Round, error) {
	round, ok := r.rounds[*id]
	if !ok {
		return nil, fmt.Errorf("round not found")
	}

	return round, nil
}

// Rounds is the resolver for the Rounds field.
func (r *queryResolver) Rounds(ctx context.Context, n *int) ([]*model.Round, error) {
	for _, round := range r.rounds {
		return []*model.Round{round}, nil
	}

	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
