package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"grpc-mafia/round-tracker/graph/model"
)

// CreateRound is the resolver for the CreateRound field.
func (r *mutationResolver) CreateRound(ctx context.Context, roundInfo model.RoundInfo, playerInfos []*model.PlayerInfo) (*model.Round, error) {
	if err := r.db.InsertRound(&roundInfo); err != nil {
		return nil, err
	}

	for _, player_info := range playerInfos {
		if err := r.db.InsertRoundPlayer(roundInfo.ID, player_info); err != nil {
			return nil, err
		}
	}

	round, err := r.db.GetRound(roundInfo.ID)
	if err != nil {
		return nil, err
	}

	return round, nil
}

// UpdateRound is the resolver for the UpdateRound field.
func (r *mutationResolver) UpdateRound(ctx context.Context, roundID string, newState model.RoundState, playerStatuses []*model.PlayerStatus) (*model.Round, error) {
	r.db.UpdateRound(roundID, &newState)

	for _, player_status := range playerStatuses {
		if err := r.db.UpdateRoundPlayer(roundID, player_status); err != nil {
			return nil, err
		}
	}

	round, err := r.db.GetRound(roundID)
	if err != nil {
		return nil, err
	}

	return round, nil
}

// AddComment is the resolver for the AddComment field.
func (r *mutationResolver) AddComment(ctx context.Context, roundID string, from string, text string) (*model.Round, error) {
	if err := r.db.InsertRoundComment(roundID, from, text); err != nil {
		return nil, err
	}

	round, err := r.db.GetRound(roundID)
	if err != nil {
		return nil, err
	}

	return round, nil
}

// GetRoundInfo is the resolver for the GetRoundInfo field.
func (r *queryResolver) GetRoundInfo(ctx context.Context, id *string) (*model.Round, error) {
	round, err := r.db.GetRound(*id)
	if err != nil {
		return nil, err
	}

	return round, nil
}

// ListRounds is the resolver for the ListRounds field.
func (r *queryResolver) ListRounds(ctx context.Context, n *int, state model.RoundState) ([]*model.Round, error) {
	rounds, err := r.db.ListRounds(*n, state)
	if err != nil {
		return nil, err
	}

	return rounds, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
