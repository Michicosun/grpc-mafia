// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package tracker_client_impl

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreateRoundCreateRound includes the requested fields of the GraphQL type Round.
type CreateRoundCreateRound struct {
	Id         string                                `json:"id"`
	State      RoundState                            `json:"state"`
	Started_at string                                `json:"started_at"`
	Players    []CreateRoundCreateRoundPlayersPlayer `json:"players"`
}

// GetId returns CreateRoundCreateRound.Id, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRound) GetId() string { return v.Id }

// GetState returns CreateRoundCreateRound.State, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRound) GetState() RoundState { return v.State }

// GetStarted_at returns CreateRoundCreateRound.Started_at, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRound) GetStarted_at() string { return v.Started_at }

// GetPlayers returns CreateRoundCreateRound.Players, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRound) GetPlayers() []CreateRoundCreateRoundPlayersPlayer { return v.Players }

// CreateRoundCreateRoundPlayersPlayer includes the requested fields of the GraphQL type Player.
type CreateRoundCreateRoundPlayersPlayer struct {
	Login string `json:"login"`
	Role  string `json:"role"`
	Alive bool   `json:"alive"`
}

// GetLogin returns CreateRoundCreateRoundPlayersPlayer.Login, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRoundPlayersPlayer) GetLogin() string { return v.Login }

// GetRole returns CreateRoundCreateRoundPlayersPlayer.Role, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRoundPlayersPlayer) GetRole() string { return v.Role }

// GetAlive returns CreateRoundCreateRoundPlayersPlayer.Alive, and is useful for accessing the field via an interface.
func (v *CreateRoundCreateRoundPlayersPlayer) GetAlive() bool { return v.Alive }

// CreateRoundResponse is returned by CreateRound on success.
type CreateRoundResponse struct {
	CreateRound CreateRoundCreateRound `json:"CreateRound"`
}

// GetCreateRound returns CreateRoundResponse.CreateRound, and is useful for accessing the field via an interface.
func (v *CreateRoundResponse) GetCreateRound() CreateRoundCreateRound { return v.CreateRound }

type PlayerInfo struct {
	Login string `json:"login"`
	Role  string `json:"role"`
}

// GetLogin returns PlayerInfo.Login, and is useful for accessing the field via an interface.
func (v *PlayerInfo) GetLogin() string { return v.Login }

// GetRole returns PlayerInfo.Role, and is useful for accessing the field via an interface.
func (v *PlayerInfo) GetRole() string { return v.Role }

type PlayerStatus struct {
	Login string `json:"login"`
	Alive bool   `json:"alive"`
}

// GetLogin returns PlayerStatus.Login, and is useful for accessing the field via an interface.
func (v *PlayerStatus) GetLogin() string { return v.Login }

// GetAlive returns PlayerStatus.Alive, and is useful for accessing the field via an interface.
func (v *PlayerStatus) GetAlive() bool { return v.Alive }

type RoundInfo struct {
	Id         string     `json:"id"`
	State      RoundState `json:"state"`
	Started_at string     `json:"started_at"`
}

// GetId returns RoundInfo.Id, and is useful for accessing the field via an interface.
func (v *RoundInfo) GetId() string { return v.Id }

// GetState returns RoundInfo.State, and is useful for accessing the field via an interface.
func (v *RoundInfo) GetState() RoundState { return v.State }

// GetStarted_at returns RoundInfo.Started_at, and is useful for accessing the field via an interface.
func (v *RoundInfo) GetStarted_at() string { return v.Started_at }

type RoundState string

const (
	RoundStateRunning     RoundState = "RUNNING"
	RoundStateWinMafia    RoundState = "WIN_MAFIA"
	RoundStateWinSheriffs RoundState = "WIN_SHERIFFS"
)

// UpdateRoundResponse is returned by UpdateRound on success.
type UpdateRoundResponse struct {
	UpdateRound UpdateRoundUpdateRound `json:"UpdateRound"`
}

// GetUpdateRound returns UpdateRoundResponse.UpdateRound, and is useful for accessing the field via an interface.
func (v *UpdateRoundResponse) GetUpdateRound() UpdateRoundUpdateRound { return v.UpdateRound }

// UpdateRoundUpdateRound includes the requested fields of the GraphQL type Round.
type UpdateRoundUpdateRound struct {
	Id      string                                `json:"id"`
	State   RoundState                            `json:"state"`
	Players []UpdateRoundUpdateRoundPlayersPlayer `json:"players"`
}

// GetId returns UpdateRoundUpdateRound.Id, and is useful for accessing the field via an interface.
func (v *UpdateRoundUpdateRound) GetId() string { return v.Id }

// GetState returns UpdateRoundUpdateRound.State, and is useful for accessing the field via an interface.
func (v *UpdateRoundUpdateRound) GetState() RoundState { return v.State }

// GetPlayers returns UpdateRoundUpdateRound.Players, and is useful for accessing the field via an interface.
func (v *UpdateRoundUpdateRound) GetPlayers() []UpdateRoundUpdateRoundPlayersPlayer { return v.Players }

// UpdateRoundUpdateRoundPlayersPlayer includes the requested fields of the GraphQL type Player.
type UpdateRoundUpdateRoundPlayersPlayer struct {
	Login string `json:"login"`
	Alive bool   `json:"alive"`
}

// GetLogin returns UpdateRoundUpdateRoundPlayersPlayer.Login, and is useful for accessing the field via an interface.
func (v *UpdateRoundUpdateRoundPlayersPlayer) GetLogin() string { return v.Login }

// GetAlive returns UpdateRoundUpdateRoundPlayersPlayer.Alive, and is useful for accessing the field via an interface.
func (v *UpdateRoundUpdateRoundPlayersPlayer) GetAlive() bool { return v.Alive }

// __CreateRoundInput is used internally by genqlient
type __CreateRoundInput struct {
	Round_info   RoundInfo    `json:"round_info"`
	Player_infos []PlayerInfo `json:"player_infos"`
}

// GetRound_info returns __CreateRoundInput.Round_info, and is useful for accessing the field via an interface.
func (v *__CreateRoundInput) GetRound_info() RoundInfo { return v.Round_info }

// GetPlayer_infos returns __CreateRoundInput.Player_infos, and is useful for accessing the field via an interface.
func (v *__CreateRoundInput) GetPlayer_infos() []PlayerInfo { return v.Player_infos }

// __UpdateRoundInput is used internally by genqlient
type __UpdateRoundInput struct {
	Round_id        string         `json:"round_id"`
	New_state       RoundState     `json:"new_state"`
	Player_statuses []PlayerStatus `json:"player_statuses"`
}

// GetRound_id returns __UpdateRoundInput.Round_id, and is useful for accessing the field via an interface.
func (v *__UpdateRoundInput) GetRound_id() string { return v.Round_id }

// GetNew_state returns __UpdateRoundInput.New_state, and is useful for accessing the field via an interface.
func (v *__UpdateRoundInput) GetNew_state() RoundState { return v.New_state }

// GetPlayer_statuses returns __UpdateRoundInput.Player_statuses, and is useful for accessing the field via an interface.
func (v *__UpdateRoundInput) GetPlayer_statuses() []PlayerStatus { return v.Player_statuses }

// The query or mutation executed by CreateRound.
const CreateRound_Operation = `
mutation CreateRound ($round_info: RoundInfo!, $player_infos: [PlayerInfo!]!) {
	CreateRound(round_info: $round_info, player_infos: $player_infos) {
		id
		state
		started_at
		players {
			login
			role
			alive
		}
	}
}
`

func CreateRound(
	ctx context.Context,
	client graphql.Client,
	round_info RoundInfo,
	player_infos []PlayerInfo,
) (*CreateRoundResponse, error) {
	req := &graphql.Request{
		OpName: "CreateRound",
		Query:  CreateRound_Operation,
		Variables: &__CreateRoundInput{
			Round_info:   round_info,
			Player_infos: player_infos,
		},
	}
	var err error

	var data CreateRoundResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by UpdateRound.
const UpdateRound_Operation = `
mutation UpdateRound ($round_id: ID!, $new_state: RoundState!, $player_statuses: [PlayerStatus!]!) {
	UpdateRound(round_id: $round_id, new_state: $new_state, player_statuses: $player_statuses) {
		id
		state
		players {
			login
			alive
		}
	}
}
`

func UpdateRound(
	ctx context.Context,
	client graphql.Client,
	round_id string,
	new_state RoundState,
	player_statuses []PlayerStatus,
) (*UpdateRoundResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateRound",
		Query:  UpdateRound_Operation,
		Variables: &__UpdateRoundInput{
			Round_id:        round_id,
			New_state:       new_state,
			Player_statuses: player_statuses,
		},
	}
	var err error

	var data UpdateRoundResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
